"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertCircle, CheckCircle, FileText, Search, WormIcon as Virus } from "lucide-react"

export function MalwareSimulator() {
  const [scanProgress, setScanProgress] = useState(0)
  const [isScanning, setIsScanning] = useState(false)
  const [scanResults, setScanResults] = useState<ScanResult[]>([])
  const [systemStatus, setSystemStatus] = useState<"clean" | "infected" | "unknown">("unknown")
  const [activeThreats, setActiveThreats] = useState<Threat[]>([
    {
      id: 1,
      name: "Trojan.FakeAV",
      type: "trojan",
      status: "active",
      severity: "high",
      location: "C:/Program Files/FakeApp/service.exe",
    },
    {
      id: 2,
      name: "Adware.Popup",
      type: "adware",
      status: "active",
      severity: "medium",
      location: "C:/Users/Admin/AppData/Local/Temp/ad32.dll",
    },
    {
      id: 3,
      name: "Rootkit.Hidden",
      type: "rootkit",
      status: "active",
      severity: "critical",
      location: "C:/Windows/System32/drivers/hidden.sys",
    },
  ])

  const startScan = () => {
    setIsScanning(true)
    setScanProgress(0)
    setScanResults([])

    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          setIsScanning(false)
          generateScanResults()
          return 100
        }
        return prev + 1
      })
    }, 50)
  }

  const generateScanResults = () => {
    const results: ScanResult[] = [
      { timestamp: new Date().toISOString(), type: "info", message: "Scan started" },
      { timestamp: new Date().toISOString(), type: "info", message: "Checking system memory..." },
      { timestamp: new Date().toISOString(), type: "info", message: "Scanning system files..." },
      {
        timestamp: new Date().toISOString(),
        type: "warning",
        message: "Suspicious file detected: C:/Program Files/FakeApp/service.exe",
      },
      { timestamp: new Date().toISOString(), type: "error", message: "Malware detected: Trojan.FakeAV" },
      { timestamp: new Date().toISOString(), type: "info", message: "Scanning user files..." },
      {
        timestamp: new Date().toISOString(),
        type: "warning",
        message: "Suspicious file detected: C:/Users/Admin/AppData/Local/Temp/ad32.dll",
      },
      { timestamp: new Date().toISOString(), type: "error", message: "Malware detected: Adware.Popup" },
      { timestamp: new Date().toISOString(), type: "info", message: "Scanning registry..." },
      { timestamp: new Date().toISOString(), type: "error", message: "Rootkit detected: Hidden registry keys" },
      { timestamp: new Date().toISOString(), type: "info", message: "Scan completed. 3 threats found." },
    ]

    setScanResults(results)
    setSystemStatus("infected")
  }

  const removeThreat = (id: number) => {
    setActiveThreats((prev) => prev.filter((threat) => threat.id !== id))

    setScanResults((prev) => [
      ...prev,
      {
        timestamp: new Date().toISOString(),
        type: "success",
        message: `Threat ID ${id} successfully removed`,
      },
    ])

    if (activeThreats.length <= 1) {
      setSystemStatus("clean")
    }
  }

  const quarantineThreat = (id: number) => {
    setActiveThreats((prev) => prev.map((threat) => (threat.id === id ? { ...threat, status: "quarantined" } : threat)))

    setScanResults((prev) => [
      ...prev,
      {
        timestamp: new Date().toISOString(),
        type: "info",
        message: `Threat ID ${id} moved to quarantine`,
      },
    ])
  }

  return (
    <Card className="border-2">
      <CardHeader>
        <CardTitle>Malware Analysis Laboratory</CardTitle>
        <CardDescription>Detect, analyze, and remove malware in a safe, simulated environment</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div
              className={`rounded-full p-1 ${
                systemStatus === "clean" ? "bg-green-100" : systemStatus === "infected" ? "bg-red-100" : "bg-amber-100"
              }`}
            >
              {systemStatus === "clean" && <CheckCircle className="h-5 w-5 text-green-500" />}
              {systemStatus === "infected" && <Virus className="h-5 w-5 text-red-500" />}
              {systemStatus === "unknown" && <Search className="h-5 w-5 text-amber-500" />}
            </div>
            <div>
              <p className="text-sm font-medium">System Status</p>
              <p className="text-xs text-muted-foreground">
                {systemStatus === "clean" && "No threats detected"}
                {systemStatus === "infected" && `${activeThreats.length} active threats`}
                {systemStatus === "unknown" && "Unknown - scan required"}
              </p>
            </div>
          </div>

          <Button onClick={startScan} disabled={isScanning}>
            {isScanning ? "Scanning..." : "Start Scan"}
          </Button>
        </div>

        {isScanning && (
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm">Scanning system...</span>
              <span className="text-sm">{scanProgress}%</span>
            </div>
            <Progress value={scanProgress} className="h-2" />
          </div>
        )}

        <Tabs defaultValue="threats" className="mt-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="threats">Active Threats</TabsTrigger>
            <TabsTrigger value="scan">Scan Results</TabsTrigger>
            <TabsTrigger value="analysis">Threat Analysis</TabsTrigger>
          </TabsList>

          <TabsContent value="threats" className="space-y-4 pt-4">
            {activeThreats.length === 0 ? (
              <div className="rounded-md bg-green-50 p-4 text-center">
                <CheckCircle className="mx-auto h-8 w-8 text-green-500" />
                <p className="mt-2 font-medium text-green-800">No active threats detected</p>
                <p className="text-sm text-green-600">Your system is clean and protected</p>
              </div>
            ) : (
              <div className="space-y-4">
                {activeThreats.map((threat) => (
                  <div key={threat.id} className="rounded-md border p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-4">
                        <div
                          className={`rounded-full p-2 ${
                            threat.severity === "critical"
                              ? "bg-red-100"
                              : threat.severity === "high"
                                ? "bg-amber-100"
                                : "bg-yellow-100"
                          }`}
                        >
                          <Virus
                            className={`h-5 w-5 ${
                              threat.severity === "critical"
                                ? "text-red-500"
                                : threat.severity === "high"
                                  ? "text-amber-500"
                                  : "text-yellow-500"
                            }`}
                          />
                        </div>
                        <div>
                          <div className="flex items-center">
                            <h3 className="font-medium">{threat.name}</h3>
                            <Badge
                              variant="outline"
                              className={`ml-2 ${
                                threat.status === "active"
                                  ? "border-red-200 text-red-800"
                                  : "border-amber-200 text-amber-800"
                              }`}
                            >
                              {threat.status}
                            </Badge>
                          </div>
                          <p className="text-sm text-muted-foreground">Type: {threat.type}</p>
                          <p className="text-sm text-muted-foreground">Location: {threat.location}</p>
                          <div className="mt-1 flex items-center">
                            <span className="text-xs font-medium">Severity:</span>
                            <span
                              className={`ml-1 text-xs ${
                                threat.severity === "critical"
                                  ? "text-red-600"
                                  : threat.severity === "high"
                                    ? "text-amber-600"
                                    : "text-yellow-600"
                              }`}
                            >
                              {threat.severity.charAt(0).toUpperCase() + threat.severity.slice(1)}
                            </span>
                          </div>
                        </div>
                      </div>

                      <div className="flex space-x-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => quarantineThreat(threat.id)}
                          disabled={threat.status === "quarantined"}
                        >
                          Quarantine
                        </Button>
                        <Button variant="destructive" size="sm" onClick={() => removeThreat(threat.id)}>
                          Remove
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="scan" className="pt-4">
            <div className="h-[300px] overflow-y-auto rounded-md border p-4">
              {scanResults.length === 0 ? (
                <div className="flex h-full items-center justify-center">
                  <p className="text-muted-foreground">No scan results available. Start a scan to see results.</p>
                </div>
              ) : (
                <div className="space-y-2">
                  {scanResults.map((result, index) => (
                    <div key={index} className="flex items-start">
                      {result.type === "info" && <FileText className="mr-2 h-4 w-4 text-blue-500" />}
                      {result.type === "warning" && <AlertCircle className="mr-2 h-4 w-4 text-amber-500" />}
                      {result.type === "error" && <Virus className="mr-2 h-4 w-4 text-red-500" />}
                      {result.type === "success" && <CheckCircle className="mr-2 h-4 w-4 text-green-500" />}
                      <div>
                        <p className="text-sm">{result.message}</p>
                        <p className="text-xs text-muted-foreground">
                          {new Date(result.timestamp).toLocaleTimeString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-4 pt-4">
            <div className="rounded-md border p-4">
              <h3 className="mb-2 font-medium">Trojan.FakeAV Analysis</h3>
              <div className="space-y-2">
                <div className="grid grid-cols-3 gap-2 text-sm">
                  <div className="font-medium">Type:</div>
                  <div className="col-span-2">Trojan Horse</div>

                  <div className="font-medium">Behavior:</div>
                  <div className="col-span-2">Disguises as legitimate antivirus software</div>

                  <div className="font-medium">Infection Vector:</div>
                  <div className="col-span-2">Malicious downloads, bundled software</div>

                  <div className="font-medium">Impact:</div>
                  <div className="col-span-2">Displays fake security alerts, attempts to collect payment</div>
                </div>

                <div className="mt-2 rounded-md bg-muted p-2 text-xs">
                  <p className="font-medium">Technical Details:</p>
                  <ul className="list-disc pl-4 pt-1">
                    <li>
                      Creates persistence through registry key: HKCU\Software\Microsoft\Windows\CurrentVersion\Run
                    </li>
                    <li>Modifies system files to prevent removal</li>
                    <li>Connects to command and control server at malicious-domain.example</li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="rounded-md border p-4">
              <h3 className="mb-2 font-medium">Rootkit.Hidden Analysis</h3>
              <div className="space-y-2">
                <div className="grid grid-cols-3 gap-2 text-sm">
                  <div className="font-medium">Type:</div>
                  <div className="col-span-2">Kernel-mode rootkit</div>

                  <div className="font-medium">Behavior:</div>
                  <div className="col-span-2">Hides processes, files, and registry keys from detection</div>

                  <div className="font-medium">Infection Vector:</div>
                  <div className="col-span-2">Exploits system vulnerabilities, malicious drivers</div>

                  <div className="font-medium">Impact:</div>
                  <div className="col-span-2">Provides persistent backdoor access, hides other malware</div>
                </div>

                <div className="mt-2 rounded-md bg-muted p-2 text-xs">
                  <p className="font-medium">Technical Details:</p>
                  <ul className="list-disc pl-4 pt-1">
                    <li>Hooks system calls to filter results</li>
                    <li>Modifies the System Service Descriptor Table (SSDT)</li>
                    <li>Uses Direct Kernel Object Manipulation (DKOM) to hide processes</li>
                    <li>Requires specialized tools for detection and removal</li>
                  </ul>
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline">Reset Simulation</Button>
        <Button>Run Deep Scan</Button>
      </CardFooter>
    </Card>
  )
}

interface ScanResult {
  timestamp: string
  type: "info" | "warning" | "error" | "success"
  message: string
}

interface Threat {
  id: number
  name: string
  type: string
  status: "active" | "quarantined" | "removed"
  severity: "low" | "medium" | "high" | "critical"
  location: string
}

